-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module AbsInstant where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Program = Prog [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt = SAss Ident Exp | SExp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = ExpAdd Exp Exp
    | ExpSub Exp Exp
    | ExpMul Exp Exp
    | ExpDiv Exp Exp
    | ExpLit Integer
    | ExpVar Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

